/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hs: homerow_shifts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hsl: homerow_shifts_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&to>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bl: layertap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERTAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&to>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W       &kp L       &kp M       &kp G                   &kp J   &kp L       &kp U       &kp Y         &kp BACKSPACE
&kp A         &hm LCTL R  &hm LALT S  &hm LGUI T  &kp D                   &kp H   &hm RGUI N  &hm RALT E  &hm RCTL I    &kp O
&hs LSHIFT Z  &kp X       &kp C       &kp V       &mt LC(LS(LALT)) SPC    &kp B   &kp K       &kp M       &td EXCL DOT  &hs RSHIFT X
                                      &sl 1       &trans                  &trans  &kp E
            >;
        };

        left_layer {
            bindings = <
&trans            &kp ATSN        &td LC(LG(LS(N4))) LS(N3)  &kp DLLR               &trans    &trans  &kp LS(COMMA)  &kp LS(DOT)    &kp CARET      &trans
&kp TAB           &hm LCTL EQUAL  &hm LALT LA(RBKT)          &hm LGUI LA(LS(RBKT))  &trans    &trans  &hm RGUI LBRC  &hm RALT RBRC  &hm RCTL PIPE  &kp AMPS
&hs LSHIFT TILDE  &kp GRAVE       &kp LA(LBKT)               &kp LA(LS(LBKT))       &to 0     &to 2   &kp LPRN       &kp RPRN       &kp RBKT       &kp RSHIFT
                                                             &to 0                  &trans    &trans  &to 2
            >;
        };

        right_layer {
            bindings = <
&trans         &kp C_PP   &kp C_PREV         &kp C_NEXT         &trans    &trans  &kp N7       &kp N8  &kp N9      &trans
&kp TAB        &trans     &hm LALT C_VOL_DN  &hm LGUI C_VOL_UP  &trans    &trans  &hm RGUI N4  &kp N5  &kp N6      &kp EQUAL
&hsl LSHIFT 4  &kp PRCNT  &kp SLASH          &kp STAR           &to 0     &trans  &kp N1       &kp N2  &td DOT N3  &kp MINUS
                                             &to 0              &trans    &trans  &trans
            >;
        };

        tri_layer {
            bindings = <
&trans      &mwh SCROLL_LEFT  &mmv MOVE_UP    &mwh SCROLL_RIGHT  &trans    &trans    &kp LC(LS(TAB))  &kp RC(TAB)    &kp LG(LBKT)    &trans
&kp TAB     &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &trans    &trans    &kp DOWN         &hm RALT UP    &hm RCTL RIGHT  &kp LG(RBKT)
&kp LSHIFT  &mkp RCLK         &mwh SCROLL_UP  &mwh SCROLL_DOWN   &to 0     &kp RGUI  &td HOME PG_DN   &td END PG_UP  &trans          &kp RSHIFT
                                              &to 0              &trans    &trans    &kp RGUI
            >;
        };

        bt {
            bindings = <
&trans       &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans
&bootloader  &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans
&bt BT_PRV   &bt BT_NXT  &bt BT_CLR  &trans  &to 0     &to 1   &trans  &trans  &trans  &trans
                                     &to 0   &trans    &trans  &to 1
            >;
        };
    };
};
