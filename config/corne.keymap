/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hm: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10>;    // <---[[right-hand keys]]
        };

        hs: homerow_shifts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hsl: homerow_shifts_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&to>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bl: layertap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERTAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&to>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q         &kp W        &kp L       &kp M       &kp G            &kp J      &kp L       &kp U       &kp Y        &kp DELETE
  &kp A         &hm LCTRL R  &hm LALT S  &hm LGUI T  &kp D            &kp H      &hm RGUI N  &hm RALT E  &hm RCTRL I  &kp O
  &hm LSHIFT Z  &kp X        &kp C       &kp V       &kp TAB          &kp B      &kp K       &kp M       &trans       &kp RIGHT_SHIFT
                             &to 2       &sl 1       &kp BACKSPACE    &kp SPACE  &to 3       &to 4
            >;
        };

        symbols {
            bindings = <
  &trans  &trans  &trans  &trans  &trans            &kp SEMICOLON     &kp SLASH          &kp BACKSLASH      &kp MINUS   &kp EQUAL
  &trans  &trans  &trans  &trans  &kp LEFT_SHIFT    &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp COMMA          &kp PERIOD  &kp UNDER
  &trans  &trans  &trans  &trans  &trans            &kp GRAVE         &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &trans      &trans
                  &trans  &trans  &trans            &kp SPACE         &trans             &trans
            >;
        };

        left_layer {
            bindings = <
  &kp F1            &kp F2       &kp F3      &kp F4         &kp F5           &kp F6         &kp F7            &kp F8            &kp F9                &kp F10
  &kp EXCLAMATION   &kp AT_SIGN  &kp HASH    &kp DOLLAR     &kp PERCENT      &kp CARET      &kp AMPERSAND     &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
  &hm LSHIFT GRAVE  &kp COMMA    &kp PERIOD  &kp BACKSLASH  &kp SLASH        &kp SEMICOLON  &kp SINGLE_QUOTE  &kp LEFT_BRACKET  &kp RBKT              &kp RSHIFT
                                 &mo 0       &to 0          &kp BACKSPACE    &kp SPACE      &to 3             &to 4
            >;
        };

//        navigation {
//            bindings = <
//  &trans      &msc SCROLL_LEFT  &mmv MOVE_UP    &msc SCROLL_RIGHT  &trans    &trans    &mkp LCLK       &kp UP_ARROW  &mkp RCLK  &trans
//  &kp TAB     &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &trans    &trans    &kp LEFT        &kp DOWN      &kp RIGHT  &kp LG(RBKT)
//  &kp LSHIFT  &mkp RCLK         &msc SCROLL_UP  &msc SCROLL_DOWN   &to 0     &kp RGUI  &kp HOME        &kp PAGE_UP   &trans     &kp RSHIFT
//                                &trans          &to 0              &trans    &trans    &kp RGUI        &to 4
//            >;
//        };

        media_controls {
            bindings = <
  &trans                &kp C_PP              &kp C_PREV         &kp C_NEXT         &trans           &trans     &kp N7       &kp N8  &kp N9        &trans
  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &hm LALT C_VOL_DN  &hm LGUI C_VOL_UP  &kp K_MUTE       &trans     &hm RGUI N4  &kp N5  &kp N6        &kp EQUAL
  &trans                &kp PRCNT             &kp SLASH          &kp STAR           &to 0            &trans     &kp N1       &kp N2  &kp NUMBER_3  &kp MINUS
                                              &to 2              &to 0              &kp BACKSPACE    &kp SPACE  &to 3        &trans
            >;
        };
    };
};
